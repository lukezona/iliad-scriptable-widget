//
//  Iliad data usage widget
//  Based upon existing widget by filippo.im
//  Customized by Luca Zonarelli (github.com/lukezona)
//
//  Set here your Iliad credentials
//
const USERNAME = '';
const PASSWORD = '';

//
//  Styling options
//

// Theme: 
//  - default (red background, white text)
//  - light (white background, red text)
//  - dark (dark background, white text)
const theme = "default"

// Show your phone number (useful for dual SIM usage)
const showNumber = false

// Show a custom label to identify the SIM (if true will override the phone number to false)
const showLabel = false
const label = ""

// Show renew date
const showRenew = false

// Show messages
const showMessages = false

//
//  DON'T MODIFY FROM HERE
//

// Styles
const red = new Color('#c12026')
const darkred = new Color('#ae0000')
const dark = new Color('#212121')
const grey = new Color('#d9d9d9')
const black = new Color('#000000')
const white = new Color('#ffffff')

let bgColor = red
let textColor = white
let logo = white

let progressBg = darkred
let progressFill = white

switch (theme) {
    case 'light': {
        bgColor = white
        textColor = dark
        logo = red
        progressBg = grey
        progressFill = red
        break;
    }
    case 'dark': {
        bgColor = dark
        textColor = white
        logo = white
        progressBg = black
        progressFill = red
        break;
    }
    default: {
        bgColor = red
        textColor = white
        logo = white
        progressBg = darkred
        progressFill = white
        break;
    }
}

const ILIAD_URL = 'https://www.iliad.it/account/consumi-e-credito';

const width = 120;

const createWidget = async () => {

    const result = await getIliadData()

    const list = new ListWidget()
    list.backgroundColor = bgColor
    list.refreshAfterDate = new Date(Date.now() + 30 * 60 * 1000)

    if (result.match(/Numero: [0-9]*.[0-9]*.[0-9]*/)) {

        const number = result.match(/Numero: [0-9]*.[0-9]*.[0-9]*/)[0];
        const dateRenew = result.match(/[0-9]{2}\/[0-9]{2}\/[0-9]{4}/)[0];
        const calls = result.match(/Chiamate: [0-9]*[a-z]*.+s/)[0];
        const messages = result.match(/[0-9]{1,4} SMS/)[0];
        const gb_italy = result.match(/[0-9]*,*[0-9]*[a-zA-Z]* \/ [0-9]+GB/)[0]
        const gb_eu = result.match(/[0-9]*,*[0-9]*[a-zA-Z]* \/ [0-9]GB/)[0]

        const consumati = parseUsage(gb_italy.split(' / ')[0])
        const totali = parseUsage(gb_italy.split(' / ')[1])

        const consumatiEU = parseUsage(gb_eu.split(' / ')[0])
        const totaliEU = parseUsage(gb_eu.split(' / ')[1])
	
	const minutes = parseMinutes(calls)

        const header = list.addText('iliad')
        header.font = new Font('MuseoModerno', 22)
        header.textColor = logo

        if (showNumber || showLabel || showRenew) {

            if (showLabel) {
                const value_number = list.addText(label)
                value_number.font = Font.boldSystemFont(10)
                value_number.textColor = textColor
            } else if (showNumber) {
                const value_number = list.addText(number.replace('Numero: ', '').replace(' ', '').replace(' ', ''))
                value_number.font = Font.boldSystemFont(10)
                value_number.textColor = textColor
            } else {
	    	const label_renew = list.addText('Rinnovo: ' + dateRenew)
		label_renew.font = Font.boldSystemFont(10)
		label_renew.textColor = textColor
	    }

            list.addSpacer(15)

        } else {
            list.addSpacer(20)
        }

        if (showMessages) {
            const value_messages = list.addText('Messaggi: ' + messages + ' su Illimitati')
            value_messages.font = Font.boldSystemFont(12)

            const progressBarMessages = list.addImage(createProgressBar(100, 0, 5));
            progressBarMessages.imageSize = new Size(width, 20);

            list.addSpacer(5)
        }

        const rowGB = list.addStack()
        addSymbol({
            symbol: 'arrow.up.arrow.down.circle',
            stack: rowGB,
            color: textColor,
            size: 16
        })
        rowGB.addSpacer()
        const value_gb_italy = rowGB.addText(consumati + ' su ' + totali + ' GB')
        value_gb_italy.font = Font.boldSystemFont(14)
        value_gb_italy.textColor = textColor

        const progressBar = list.addImage(createProgressBar(totali, consumati, 5));
        progressBar.imageSize = new Size(width, 18);

        if (consumatiEU > 0) {

            list.addSpacer(5)
	    
	    const rowEU = list.addStack()
	    const label_gb_eu = rowEU.addText('Europa: ')
            label_gb_eu.font = Font.boldSystemFont(10)
            label_gb_eu.textColor = textColor
	    rowEU.addSpacer()
            const value_gb_eu = rowEU.addText(consumatiEU + ' su ' + totaliEU + ' GB')
            value_gb_eu.font = Font.boldSystemFont(10)
            value_gb_eu.textColor = textColor

            const progressBarEU = list.addImage(createProgressBar(totaliEU, consumatiEU, 5));
            progressBarEU.imageSize = new Size(width, 15);

        } else {

            list.addSpacer(5)

            const rowCalls = list.addStack()
            const label_calls = rowCalls.addText('Minuti: ')
            label_calls.font = Font.boldSystemFont(10)
	    label_calls.textColor = textColor
	    rowCalls.addSpacer()
            const value_calls = rowCalls.addText(parseMinutes(calls) + ' su âˆž')
            value_calls.font = Font.boldSystemFont(10)
	    value_calls.textColor = textColor

            const progressBarCalls = list.addImage(createProgressBar(100, 100, 5));
            progressBarCalls.imageSize = new Size(width, 15);

        }

    } else {
        list.addText('Data not available')
    }

    return list
}

const getIliadData = async () => {

    const r = new Request(ILIAD_URL)
    r.addParameterToMultipart('login-ident', USERNAME)
    r.addParameterToMultipart('login-pwd', PASSWORD)
    r.method = 'post'

    try {
        let result = await r.loadString()
        result = result.replace(/(<([^>]+)>)/gi, "");
        return String(result)
    } catch (err) {
        return undefined
    }
}

const widget = await createWidget()
if (!config.runsInWidget) await widget.presentSmall()

Script.setWidget(widget)
Script.complete()

//
// Functions here
// 

function addSymbol({
    symbol = 'applelogo',
    stack,
    color = Color.white(),
    size = 20,
}) {
    const _sym = SFSymbol.named(symbol)
    const wImg = stack.addImage(_sym.image)
    wImg.tintColor = color
    wImg.imageSize = new Size(size, size)
}

function createProgressBar(total, soFar, height, showPercentage = false) {
    const context = new DrawContext();
    context.size = new Size(width, height);
    context.opaque = false;
    context.respectScreenScale = true;

    // bar background
    context.setFillColor(progressBg);
    const bgPath = new Path();
    bgPath.addRoundedRect(new Rect(0, 0, width, height), height / 2, (height / 2) - 1);
    context.addPath(bgPath);
    context.fillPath();

    // bar foreground
    context.setFillColor(progressFill);
    const fgPath = new Path();
    fgPath.addRoundedRect(new Rect(0, 0, (width * soFar) / total, height), height / 2, (height / 2) - 1);
    context.addPath(fgPath);
    context.fillPath();

    return context.getImage();
}

function parseUsage(usage) {
    let u = parseFloat(usage.replace(',','.'))
    if (usage.match(/\d[b]/)) {
        return 0
    } else if (usage.match(/\d[mb]/)) {
    	u = u / 1000
    	u < 100 ? u = parseFloat(u.toFixed(1)) : u = parseFloat(u.toFixed(0))
        return u
    } else if (usage.match(/\d[GB]/)) {
    	u < 100 ? u = parseFloat(u.toFixed(1)) : u = parseFloat(u.toFixed(0))
        return u
    } else {
        return "Error"
    }
}

function parseMinutes(calls) {
    if (calls.match(/\d[s]/)) {
        return 0
    } else if (calls.match(/\d[m]/)) {
        return parseFloat(calls)
    } else if (calls.match(/\d[o]/)) {
        return parseFloat(calls) * 60
    } else {
        return "Error"
    }
}
